### DONE ####
agent blue print
flask server that handles requests to the database and takes care of tokens
working cli that communicates to database and allows execution of commands
Create Bash Setup Script To Run Docker and create initial admin password -> setup.sh 
Then it tells you to run black tabby cli pythons script to create database and view -> have blacktabby start flask in the background
Then it runs flask server for you -> have blacktabby start flask in the background
created horrible c agent, using libcurl and json-c it works but its terrible


##### TO DO ####
for all agents add initial shell commands that will be in original json document aka os user ip 
for all agents add server ip and port its contacting as arguments (have setup.py explain this) so that ip and port arent hardcoded
somehow encrypt login strings on agent and server decrypts them upon getting them, so that headers arent hardcoded into agents
powershell agent remove print statements, add error checking, so far its working pretty decently
python agent remove print statements
create C# agent 
Create dropper (could be powershell/vbscript) that downloads agent and adds Persistence to agent via registry. => windows
Create Powershell & C# Agent that mirrors Python Agent
Create dropper exe that downloads agent and adds Persistence to agent. => windows
Add jwt token secret key input to server.py and each agent has ip and port in cmd arguments instead of hardcoded.
create dropper bash script that downloads python agent elf(compile with pyinstaller) and adds persistence to agent => linux
Remove printing of output on agent and server
Add DNS Functionality to agents

MAIN AGENTS WILL BE
linux => python/python elf
windows => powershell/C# exe
